## Lily HBase NRT Indexing (http://www.cnblogs.com/kekukekro/p/6340944.html)
1. edit hbase configuration
    enable "Enable Indexing"
    enable "Enable Replication"
2. create a HBase table
    hbase shell
    <<in shell>> create 'keyValueStoreIndexerNrtTable', {NAME => 'cf_0', REPLICATION_SCOPE => 1}, {NAME => 'cf_1', REPLICATION_SCOPE => 1}
3. create a solr collection
    solrctl instancedir --generate /tmp/solr_configs
    solrctl instancedir --create keyValueStoreIndexerNrtCollection /tmp/solr_configs
    solrctl instancedir --list 
    solrctl collection --create keyValueStoreIndexerNrtCollection -s 1 -m 1 -r 1 -c keyValueStoreIndexerNrtCollection
4. creating a morphline configuration file
    mkdir -p /tmp/keyValueStoreIndexer/conf/
    vi /tmp/keyValueStoreIndexer/conf/morphlines_nrt.conf

SOLR_LOCATOR : {
  collection : keyValueStoreIndexerNrtCollection
  zkHost : "node0:2181,node1:2181,node2:2181/solr"
}
morphlines : [
  {
    id : morphline1
    importCommands : ["org.kitesdk.morphline.**", "com.ngdata.**"]
    commands : [
      {
        extractHBaseCells {
          mappings : [
            {
              inputColumn : "cf_0:*"
              outputField : "zero_*"
              type : "string"
              source : "value"
            },
            {
              inputColumn : "cf_1:c_0"
              outputField : "one_c_0_s"
              type : "string"
              source : "value"
            },
            {
              inputColumn : "cf_1:c_1"
              outputField : "one_c_1_s"
              type : "string"
              source : "value"
            }
          ]
        }
      }
      { logInfo { format : "output record: {}", args : ["@{}"] } }
    ]
  }
]

5. create a lily hbase indexer configuration
    mkdir -p /tmp/keyValueStoreIndexer/mapper
    vi /tmp/keyValueStoreIndexer/mapper/morphline-hbase-mapper_nrt.xml
    
<?xml version="1.0"?>
<indexer table="keyValueStoreIndexerNrtTable" mapper="com.ngdata.hbaseindexer.morphline.MorphlineResultToSolrMapper">
   <!-- The relative or absolute path on the local file system to the morphline configuration file. -->
   <!-- Use relative path "morphlines.conf" for morphlines managed by Cloudera Manager -->
   <param name="morphlineFile" value="/tmp/keyValueStoreIndexer/conf/morphlines_nrt.conf"/>
   <!-- The optional morphlineId identifies a morphline if there are multiple morphlines in morphlines.conf -->
   <!-- <param name="morphlineId" value="morphline1"/> -->
</indexer>

6. add hbase-indexer
    hbase-indexer add-indexer --name nrtIndexer --indexer-conf /tmp/keyValueStoreIndexer/mapper/morphline-hbase-mapper_nrt.xml --connection-param solr.zk=node0:2181,node1:2181,node2:2181/solr --connection-param solr.collection=keyValueStoreIndexerNrtCollection --zookeeper node0:2181,node1:2181,node2:2181
    hbase-indexer list-indexers --zookeeper node0:2181,node1:2181,node2:2181

7. create hbase data
    hbase shell
    <<in shell>> put 'keyValueStoreIndexerNrtTable', 'rowkey_0', 'cf_0:c_0_s', 'zero_0_0' 
    <<in shell>> put 'keyValueStoreIndexerNrtTable', 'rowkey_0', 'cf_0:c_1_s', 'zero_0_1' 
    <<in shell>> put 'keyValueStoreIndexerNrtTable', 'rowkey_0', 'cf_1:c_0', 'zero_1_0' 
    <<in shell>> put 'keyValueStoreIndexerNrtTable', 'rowkey_0', 'cf_1:c_1', 'zero_1_1' 

    <<in shell>> put 'keyValueStoreIndexerNrtTable', 'rowkey_1', 'cf_0:c_0_s', 'one_0_0' 
    <<in shell>> put 'keyValueStoreIndexerNrtTable', 'rowkey_1', 'cf_0:c_1_s', 'one_0_1' 
    <<in shell>> put 'keyValueStoreIndexerNrtTable', 'rowkey_1', 'cf_1:c_0', 'one_1_0' 
    <<in shell>> put 'keyValueStoreIndexerNrtTable', 'rowkey_1', 'cf_1:c_1', 'one_1_1' 

8. modify hbase datae
    hbase shell
    <<in shell>> put 'keyValueStoreIndexerNrtTable', 'rowkey_0', 'cf_0:c_0_s', 'zero_0_0_modify' 
    <<in shell>> put 'keyValueStoreIndexerNrtTable', 'rowkey_0', 'cf_0:c_1_s', 'zero_0_1_modify' 
    <<in shell>> put 'keyValueStoreIndexerNrtTable', 'rowkey_0', 'cf_1:c_0', 'zero_1_0_modify' 
    <<in shell>> put 'keyValueStoreIndexerNrtTable', 'rowkey_0', 'cf_1:c_1', 'zero_1_1_modify' 

9. delete hbase data
    hbase shell
    <<in shell>> deleteall 'keyValueStoreIndexerNrtTable', 'rowkey_0'


??? ## Lily HBase NRT Indexing (https://www.cloudera.com/documentation/enterprise/5-11-x/topics/search_hbase_batch_indexer.html)
1. edit hbase configuration
    enable "Enable Indexing"
    enable "Enable Replication"
2. create a HBase table
    hbase shell
    <<in shell>> create 'keyValueStoreIndexerBatchTable', {NAME => 'cf_0', REPLICATION_SCOPE => 1}, {NAME => 'cf_1', REPLICATION_SCOPE => 1}
3. create hbase data
    hbase shell
    <<in shell>> put 'keyValueStoreIndexerBatchTable', 'rowkey_0', 'cf_0:c_0_s', 'zero_0_0' 
    <<in shell>> put 'keyValueStoreIndexerBatchTable', 'rowkey_0', 'cf_0:c_1_s', 'zero_0_1' 
    <<in shell>> put 'keyValueStoreIndexerBatchTable', 'rowkey_0', 'cf_1:c_0', 'zero_1_0' 
    <<in shell>> put 'keyValueStoreIndexerBatchTable', 'rowkey_0', 'cf_1:c_1', 'zero_1_1' 

    <<in shell>> put 'keyValueStoreIndexerBatchTable', 'rowkey_1', 'cf_0:c_0_s', 'one_0_0' 
    <<in shell>> put 'keyValueStoreIndexerBatchTable', 'rowkey_1', 'cf_0:c_1_s', 'one_0_1' 
    <<in shell>> put 'keyValueStoreIndexerBatchTable', 'rowkey_1', 'cf_1:c_0', 'one_1_0' 
    <<in shell>> put 'keyValueStoreIndexerBatchTable', 'rowkey_1', 'cf_1:c_1', 'one_1_1' 
3. create a solr collection
    solrctl instancedir --generate /tmp/solr_configs
    solrctl instancedir --create keyValueStoreIndexerBatchCollection /tmp/solr_configs
    solrctl instancedir --list 
    solrctl collection --create keyValueStoreIndexerBatchCollection -s 1 -m 1 -r 1 -c keyValueStoreIndexerBatchCollection
4. creating a morphline configuration file
    mkdir -p /tmp/keyValueStoreIndexer/conf/
    vi /tmp/keyValueStoreIndexer/conf/morphlines_batch.conf

SOLR_LOCATOR : {
  collection : keyValueStoreIndexerBatchCollection
  zkHost : "node0:2181,node1:2181,node2:2181/solr"
}
morphlines : [
  {
    id : morphline1
    importCommands : ["org.kitesdk.morphline.**", "com.ngdata.**"]
    commands : [
      {
        extractHBaseCells {
          mappings : [
            {
              inputColumn : "cf_0:*"
              outputField : "zero_*"
              type : "string"
              source : "value"
            },
            {
              inputColumn : "cf_1:c_0"
              outputField : "one_c_0_s"
              type : "string"
              source : "value"
            },
            {
              inputColumn : "cf_1:c_1"
              outputField : "one_c_1_s"
              type : "string"
              source : "value"
            }
          ]
        }
      }
      { logInfo { format : "output record: {}", args : ["@{}"] } }
    ]
  }
]

5. create a lily hbase indexer configuration
    mkdir -p /tmp/keyValueStoreIndexer/mapper
    vi /tmp/keyValueStoreIndexer/mapper/morphline-hbase-mapper_batch.xml
    
<?xml version="1.0"?>
<indexer table="keyValueStoreIndexerBatchTable" mapper="com.ngdata.hbaseindexer.morphline.MorphlineResultToSolrMapper">
   <!-- The relative or absolute path on the local file system to the morphline configuration file. -->
   <!-- Use relative path "morphlines.conf" for morphlines managed by Cloudera Manager -->
   <param name="morphlineFile" value="/tmp/keyValueStoreIndexer/conf/morphlines_batch.conf"/>
   <!-- The optional morphlineId identifies a morphline if there are multiple morphlines in morphlines.conf -->
   <!-- <param name="morphlineId" value="morphline1"/> -->
</indexer>

6. run hbase-indexer
    hadoop --config /etc/hadoop/conf jar /opt/cloudera/parcels/CDH/lib/hbase-solr/tools/hbase-indexer-mr-job.jar --conf /etc/hbase/conf/hbase-site.xml --hbase-indexer-file /tmp/keyValueStoreIndexer/mapper/morphline-hbase-mapper_batch.xml --zk-host node0:2181,node1:2181,node2:2181/solr --collection keyValueStoreIndexerBatchCollection --go-live 

7. problem and solution
	a. problem : jobs get stuck in Accepted state
	   solution : edit yarn configuration, and give "yarn.nodemanager.resource.memory-mb" more momory.

